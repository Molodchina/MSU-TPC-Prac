I have to task to find choruses. I have a following solving function: ```python def arin_sym(lyrics):
    for lyric in lyrics:
        choruses = []
        n = len(lyric)
        for start in range(0, n):
            for length in range(2, 25):
                chorus = lyric[start:start + length]
                chorus_indices = [(start, start + length - 1)]

                for i in range(start + length, len(lyric) - length + 1):
                    if all(if_chorus(chorus[j], lyric[i + j]) for j in range(length)):
                        chorus_indices.append((i, i + length - 1))

                if len(chorus_indices) > 1:
                    choruses.append((chorus_indices, length))
        return choruses```, where "if_chorus" is based on Levenshtein distance of strings. I have the following output:
"[([(0, 1), (23, 24), (29, 30), (52, 53), (58, 59)], 2), ([(0, 2), (23, 25), (29, 31), (52, 54), (58, 60)], 3), ([(0, 3), (23, 26), (29, 32), (52, 55), (58, 61)], 4), ([(0, 4), (23, 27), (29, 33), (52, 56), (58, 62)], 5), ([(0, 5), (23, 28), (29, 34), (52, 57), (58, 63)], 6), ([(1, 2), (24, 25), (30, 31), (53, 54), (59, 60)], 2), ([(1, 3), (24, 26), (30, 32), (53, 55), (59, 61)], 3), ([(1, 4), (24, 27), (30, 33), (53, 56), (59, 62)], 4), ([(1, 5), (24, 28), (30, 34), (53, 57), (59, 63)], 5), ([(2, 3), (25, 26), (31, 32), (54, 55), (60, 61)], 2), ([(2, 4), (25, 27), (31, 33), (54, 56), (60, 62)], 3), ([(2, 5), (25, 28), (31, 34), (54, 57), (60, 63)], 4), ([(3, 4), (26, 27), (32, 33), (55, 56), (61, 62)], 2), ([(3, 5), (26, 28), (32, 34), (55, 57), (61, 63)], 3), ([(4, 5), (27, 28), (33, 34), (56, 57), (62, 63)], 2), ([(23, 24), (29, 30), (52, 53), (58, 59)], 2), ([(23, 25), (29, 31), (52, 54), (58, 60)], 3), ([(23, 26), (29, 32), (52, 55), (58, 61)], 4), ([(23, 27), (29, 33), (52, 56), (58, 62)], 5), ([(23, 28), (29, 34), (52, 57), (58, 63)], 6), ([(23, 29), (52, 58)], 7), ([(23, 30), (52, 59)], 8), ([(23, 31), (52, 60)], 9), ([(23, 32), (52, 61)], 10), ([(23, 33), (52, 62)], 11), ([(23, 34), (52, 63)], 12), ([(24, 25), (30, 31), (53, 54), (59, 60)], 2), ([(24, 26), (30, 32), (53, 55), (59, 61)], 3), ([(24, 27), (30, 33), (53, 56), (59, 62)], 4), ([(24, 28), (30, 34), (53, 57), (59, 63)], 5), ([(24, 29), (53, 58)], 6), ([(24, 30), (53, 59)], 7), ([(24, 31), (53, 60)], 8), ([(24, 32), (53, 61)], 9), ([(24, 33), (53, 62)], 10), ([(24, 34), (53, 63)], 11), ([(25, 26), (31, 32), (54, 55), (60, 61)], 2), ([(25, 27), (31, 33), (54, 56), (60, 62)], 3), ([(25, 28), (31, 34), (54, 57), (60, 63)], 4), ([(25, 29), (54, 58)], 5), ([(25, 30), (54, 59)], 6), ([(25, 31), (54, 60)], 7), ([(25, 32), (54, 61)], 8), ([(25, 33), (54, 62)], 9), ([(25, 34), (54, 63)], 10), ([(26, 27), (32, 33), (55, 56), (61, 62)], 2), ([(26, 28), (32, 34), (55, 57), (61, 63)], 3), ([(26, 29), (55, 58)], 4), ([(26, 30), (55, 59)], 5), ([(26, 31), (55, 60)], 6), ([(26, 32), (55, 61)], 7), ([(26, 33), (55, 62)], 8), ([(26, 34), (55, 63)], 9), ([(27, 28), (33, 34), (56, 57), (62, 63)], 2), ([(27, 29), (56, 58)], 3), ([(27, 30), (56, 59)], 4), ([(27, 31), (56, 60)], 5), ([(27, 32), (56, 61)], 6), ([(27, 33), (56, 62)], 7), ([(27, 34), (56, 63)], 8), ([(28, 29), (57, 58)], 2), ([(28, 30), (57, 59)], 3), ([(28, 31), (57, 60)], 4), ([(28, 32), (57, 61)], 5), ([(28, 33), (57, 62)], 6), ([(28, 34), (57, 63)], 7), ([(29, 30), (52, 53), (58, 59)], 2), ([(29, 31), (52, 54), (58, 60)], 3), ([(29, 32), (52, 55), (58, 61)], 4), ([(29, 33), (52, 56), (58, 62)], 5), ([(29, 34), (52, 57), (58, 63)], 6), ([(30, 31), (53, 54), (59, 60)], 2), ([(30, 32), (53, 55), (59, 61)], 3), ([(30, 33), (53, 56), (59, 62)], 4), ([(30, 34), (53, 57), (59, 63)], 5), ([(31, 32), (54, 55), (60, 61)], 2), ([(31, 33), (54, 56), (60, 62)], 3), ([(31, 34), (54, 57), (60, 63)], 4), ([(32, 33), (55, 56), (61, 62)], 2), ([(32, 34), (55, 57), (61, 63)], 3), ([(33, 34), (56, 57), (62, 63)], 2), ([(52, 53), (58, 59)], 2), ([(52, 54), (58, 60)], 3), ([(52, 55), (58, 61)], 4), ([(52, 56), (58, 62)], 5), ([(52, 57), (58, 63)], 6), ([(53, 54), (59, 60)], 2), ([(53, 55), (59, 61)], 3), ([(53, 56), (59, 62)], 4), ([(53, 57), (59, 63)], 5), ([(54, 55), (60, 61)], 2), ([(54, 56), (60, 62)], 3), ([(54, 57), (60, 63)], 4), ([(55, 56), (61, 62)], 2), ([(55, 57), (61, 63)], 3), ([(56, 57), (62, 63)], 2)]"

Here's what should be the result: ""chorus": [
      [
        0,
        5
      ],
      [
        23,
        28
      ],
      [
        29,
        34
      ],
      [
        52,
        57
      ],
      [
        58,
        63
      ]
    ]," based on what principles I should choose the functions's result?
